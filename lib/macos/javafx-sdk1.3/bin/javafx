#!/bin/sh
#
# JavaFX Script execution script for Linux/Solaris/OS X.
#
# Uses the same arguments as the JDK's java command.
#

# $1 - var name
# $2 - arg name, if empty do not escape the quotes and don't pass through cygpath
# out: appends value of of ${default_toolkit}_${1} and concatenation with arg $2 to $jargs
add_jarg() {
    get_jarg $1 $2
    if [ -n "${jarg}" ]; then
        if [ -n "$2" ]; then
            jargs="$jargs \"${2}${jarg}\""
        else
            jargs="$jargs ${jarg}"
        fi
    fi
    unset jarg
}

# in:  $1 - var name
# in:  $2 - do cygpath, if empty do not pass argument through cygpath
# out: jarg is set to the value of ${default_toolkit}_${1}
get_jarg() {
    jarg=`eval echo \\${${default_toolkit}_${1}}`
    if [ -n "${jarg}" ]; then
        if [ -n "$2" -a "$platform" = "windows" ]; then
            jarg=`cygpath --path --windows "$jarg"`
        fi
    fi
}

# in: default_toolkit variable
exec_java() {
    jargs="$user_jargs"

    get_jarg "execute_classpath" "true"
    if [ -n "${jarg}" ]; then
      full_classpath="$classpath:$jarg"
    else
      full_classpath="$classpath"
    fi
    
    # Under Cygwin, convert certain environment variables back to Windows format
    if [ "$platform" = "windows" ]; then
      full_classpath=`cygpath --path --windows "$full_classpath"`
      JAVA_CMD=`cygpath --unix "$JAVA_CMD"`
    fi
    
    add_jarg "execute_bootclasspath" "-Xbootclasspath:"
    add_jarg "execute_bootclasspath_prepend" "-Xbootclasspath/p:"
    add_jarg "execute_bootclasspath_append" "-Xbootclasspath/a:"
    
    get_jarg "execute_nativelibpath" "true"
    if [ -n "$jarg" ]; then
        if [ -n "$USER_LIBPATH" ]; then
            jargs="$jargs \"-Djava.library.path=${USER_LIBPATH}${PATHSEP}${jarg}\""
        else
            jargs="$jargs \"-Djava.library.path=${jarg}\""
        fi
    elif [ -n "$USER_LIBPATH" ]; then
        jargs="$jargs \"-Djava.library.path=${USER_LIBPATH}\""
    fi
    
    add_jarg "execute_bootnativelibpath" "-Dsun.boot.library.path="

    if [ -n "$USER_SECURITY" ]; then
       jargs="$jargs \"-Djava.security.policy=${USER_SECURITY}\""
    else
       add_jarg "execute_security_policy" "-Djava.security.policy="
    fi

    add_jarg "execute_vmargs_${platform}"
    add_jarg "execute_vmargs_common"
    
    if [ -n "$lastarg" ]; then
        jargs="$jargs -classpath '"$full_classpath"' $lastarg"
    else
        jargs="$jargs -classpath '"$full_classpath"' com.sun.javafx.runtime.Main"
        if [ -n "$args" ]; then
           jargs="$jargs $args"
        fi
    fi

    EMUL_CMD=`eval echo \\${${default_toolkit}_execute_emulator}`

    if [ "${EMUL_CMD}" ]; then
	# Using some form of a native application for the launcher/JVM
	if [ "$platform" = "windows" ]
	then
	    EMUL="${EMUL_CMD}.exe"
	fi
	eval \""${EMUL_CMD}"\" "$jargs"
	exit $?
    else
        if [ ! -x "$JAVA_CMD" ] ; then
            echo 'Error: JAVA_HOME is not defined, cannot find "java" command.'
            exit 1
        fi
	eval '"$JAVA_CMD"' "$jargs"
    fi
}

# resolve symlinks
PRG=$0
while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '^.*-> \(.*\)$' 2>/dev/null`
    if expr "$link" : '^/' 2> /dev/null >/dev/null; then
	PRG="$link"
    else
	PRG="`dirname "$PRG"`/$link"
    fi
done
PATHSEP=":"
# detect Darwin and Cygwin environments
case "`uname`" in
  Darwin*) platform="macosx";;
  CYGWIN*) platform="windows" ; PATHSEP=";";;
  Linux*)  platform="linux";;
  SunOS*)  platform="solaris";;
esac

if [ -n "$JAVA_HOME"  ] ; then
    JAVA_CMD="$JAVA_HOME/bin/java"
else
  JAVA_CMD=`which java 2> /dev/null `
  if [ -z "$JAVA_CMD" ] ; then
      JAVA_CMD=java
  fi
fi

if [ -z "$CLASSPATH" ] ; then
  USER_CP="."
else
  USER_CP="$CLASSPATH"
  if [ "$platform" = "windows" ]; then
    USER_CP=`cygpath --path --unix "$USER_CP"`
  fi
fi 

classpath="$USER_CP"
args=""
user_jargs=""
profile="desktop"
USER_LIBPATH=""

parse_args() {
while [ $# -gt 0 ] ; do
    case "$1" in
        -J*) jopt=`expr "X-$1" : 'X--J\(.*\)'`; user_jargs="$user_jargs \"$jopt\"";;
        -jar) shift; args="$args \"$1\""; classpath="$1"; seen_main=true ;;
        -cp | -classpath) shift; classpath="$classpath:$1";;
        -version)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -version"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -fullversion)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -fullversion"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -X)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -helpx"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -help | -\? )
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -help"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -profile) shift; profile="$1";;
        -Xtoolkit) shift; toolkit="$1";;
        -Djava.library.path*) USER_LIBPATH=`echo $1 | cut -d= -f2`;;
        -Djava.security.policy*) USER_SECURITY=`echo $1 | cut -d= -f2`;;
        -*) if [ ! -n "$seen_main" ]; then
               user_jargs="$user_jargs \"$1\""
            else 
               args="$args \"$1\"" 
            fi ;;
        *) seen_main=true ; args="$args \"$1\"";;
    esac
    shift
done
} 

parse_args "$@" # process arguments on the command line

javafx_home=`dirname "$PRG"`/..

if [ -f "${javafx_home}/profiles/${profile}.properties" ]; then
    eval `cat "${javafx_home}/profiles/${profile}.properties" | tr ";" ":" | grep -v "^#" | sed 's/^\(.*\)$/\1;/'`
else
    echo "The profile '${profile}' is not supported. Use one of these:"
    ls ${javafx_home}/profiles | sed "s/\.properties//"
    exit 1
fi

if [ -n "${toolkit}" ]; then
  default_toolkit=${toolkit}
fi

# avoid retrying to initialize prism toolkit if had failed before
if [ "$default_toolkit" = "prism" -a -f ~/.javafx/prism_failed ]; then 
    default_toolkit=swing
fi

exec_java

RES=$?

if [ "$default_toolkit" = "prism" -a $RES -eq 33 ]; then 
    mkdir -p ~/.javafx  > /dev/null 2>&1
    touch -f ~/.javafx/prism_failed > /dev/null 2>&1

    default_toolkit=swing

    exec_java

    RES=$?

fi

exit $RES

